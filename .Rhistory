library(readxl)
today <- read_excel("today.xlsx")
View(today)
table(today$City_name, today$Property_type)
install.packages('treemap')
(treemap)
treemap(today,
index = c('City_name', 'Locality_Name'),
Vsize = 'Price',
type = 'index')
install.packages('treemap')
library(treemap)
treemap(today,
index = c('City_name', 'Locality_Name'),
Vsize = 'Price',
type = 'index')
treemap(today,
index = c('City_name', 'Locality_Name'),
vSize = 'Price'
type = 'index')
treemap(today,
index = c('City_name', 'Locality_Name'),
vSize = 'Price',
type = 'index')
table(today$City_name)
library(readxl)
today <- read_excel("today.xlsx")
View(today)
LMH <- table(today$is_furnished)
barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = TRUE, beside = TRUE)
colours <- c('Green','Red','Yellow')
barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = TRUE, beside = TRUE)
barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = FALSE, beside = TRUE)
barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = FALSE, beside = FALSE)
XX <- barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = FALSE, beside = FALSE)
text(XX, 0, LMH, cex=2, pos = 3)
table(today$is_furnished, today$City_name)
table(today$is_ready_to_move, today$City_name)
library(readxl)
today <- read_excel("today.xlsx")
View(today)
barplot(table(today$is_RERA_registered))
YY <- barplot(table(today$is_RERA_registered))
AA <- table(today$is_RERA_registered)
text(YY, 0, AA, cex=2, pos = 3)
colours <- c('Green','Red','Yellow')
YY <- barplot(table(today$is_RERA_registered), colours = colours)
text(YY, 0, AA, cex=2, pos = 3)
barplot(table(today$is_RERA_registered), colours = colours)
YY <- barplot(table(today$is_RERA_registered), colours = colours)
text(YY, 0, AA, cex=2, pos = 3)
barplot(table(today$is_RERA_registered), colours <- c('RED','GREEN'))
YY <- barplot(table(today$is_RERA_registered), colours <- c('RED','GREEN'))
text(YY, 0, AA, cex=2, pos = 3)
barplot(table(today$is_RERA_registered), colours <- c('RED','GREEN'))
YY <- barplot(table(today$is_RERA_registered), colours <- c('RED','GREEN'))
text(YY, 0, AA, cex=2, pos = 3)
barplot(table(today$is_RERA_registered), col = colours)
YY <- barplot(table(today$is_RERA_registered), )
text(YY, 0, AA, cex=2, pos = 3)
YY <- barplot(table(today$is_RERA_registered), col = colours)
text(YY, 0, AA, cex=2, pos = 3)
table(today$is_RERA_registered, today$City_name)
table(today$No_of_BHK)
table(today$No_of_BHK, today$City_name)
table(today$is_Apartment)
#loading data
View(data)
head(data)
tail(data)
colnames(data)
#view dataset
View(data)
# first 6 in R using head()
head(data)
#last 6 in R using tail()
tail(data)
#Names of the columns in the datset
colnames(data)
#Names of the rows in the datset
row.names(data)
#only the first 5 columns
head(data, ncol=5)
#no of columns in the datset
ncol(data)
#finding class of the data (dataframe)
data.class(data)
#no of rows in the datset
nrow(data)
#Only the first 5 rows
tail(data, nrow=5)
#Describe
summary(data)
#Describe/summary - for a particular column
summary(data$Price)
##Describe/summary - for a two columns
summary(data$Price, data$Size)
#mean of a column in the dataset
mean(data$Price, na.rm = TRUE, trim = 0)
#mean of a column in the dataset
mean(data$Price, na.rm = TRUE, trim = 0)
#printing data using print fuction
print(data)
colMeans(data$Price_per_unit_area, na.rm =FALSE, dims = 2,4)
colMeans(data$Price_per_unit_area, na.rm =FALSE)
#Describe/summary - for a particular column
summary(data$Price)
data[duplicated(data$Size)]
#Describe/summary - for a particular column
summary(data$Price)
data[duplicated(data$Price)]
install.packages('dplyr')
library(dplyr)
#installing & activating packages & libraries (in this case - dplyr)
#install packages
install.packages("ggplot2")
install.packages("dplyr")
install.packages("broom")
library(dplyr)
library(dplyr)
#boxplots - with outliers
boxplot(summary(numerical_data$Size_property))
library(dplyr)
#boxplots - with outliers
boxplot(summary(data$Size_property))
library(dplyr)
boxplot(summary(data$Size))
#boxplot - without outliers
boxplot(summary(data$Size), outline = FALSE)
boxplot(summary(data$Size), title = 'size', col = 'blue',
varwidth = TRUE, notch = FALSE, outline = FALSE)
boxplot(data$Price~data$City_name,
main = 'price-city boxplot',
xlab = 'City_names',
ylab = 'Price',
las = 1,
names = c('Ahemdabad','Bangalore','Chennai','Delhi','Hyderabad','Kolkata','Lucknow','Mumbai')
)
library(dplyr)
table(data$City_name)
#table for multiple columns
table(data$City_name, data$Price)
#table for multiple columns
table(data$City_name, data$is_furnished)
colours <- c('Green','Red','Yellow') #defining colours for futher use
LMH <- table(today$is_furnished) #attaching counts to a variable (in this case LMH)
#BARPLOTS
#barplot - simple
colours <- c('Green','Red','Yellow') #defining colours for futher use
LMH <- table(data$is_furnished) #attaching counts to a variable (in this case LMH)
barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = TRUE, beside = TRUE)
datalabel <- barplot(LMH, main = 'FURNITURE', xlab = '', ylab = 'Frequency', col = colours,
legend.text = TRUE, beside = TRUE)
text(datalabel,0, LMH, cex = 2, pos = 3)
barplot(table(maindata$City_name, maindata$Property_type),main = 'Different types of properties in each city',
col = colours,beside = TRUE,
legend.text = TRUE, ylab = 'Frequency', xlab = 'Property type')
barplot(table(data$City_name, data$Property_type),main = 'Different types of properties in each city',
col = colours,beside = TRUE,
legend.text = TRUE, ylab = 'Frequency', xlab = 'Property type')
#barplots - clustered barplots
#required packages & libraries - ggplot,ggplot2,ggpubr
barplot(table(data$City_name, data$Property_type),main = 'Different types of properties in each city',
col = colours,beside = TRUE,
legend.text = TRUE, ylab = 'Frequency', xlab = 'Property type')
plot(data$Price_per_unit_area,data$Total_price)
plot(data$Price_per_unit_area,data$Price)
plot(data$Price_per_unit_area)
cor(data$Price_per_unit_area, data$Price)
trendline(data$Price,data$Size)
trendline(data$Price)
install.packages('basictrendline')
trendline(data$Price)
basictrenline(data$Price)
x <- data$Price
y <- data$Size
trendline(x, y, model = "line2P", plot = TRUE, linecolor = "red",
lty = 1, lwd = 1, summary = TRUE, ePos = "topleft", eDigit = 5,
eSize = 1)
plot(x,y, type = "l")
plot(y, type = "l")
plot(y, type = "t")
plot(y, type = "trendline")
plot(y, type = "l")
plot(y, type = "l")
cov(data$No_of_)
cov(x,y)
library(treemap)
treemap(data,
index=c("City_name","Locality_Name","Sub_urban_name"),
vSize = "Price",
type = "index",
title = 'To make all investments in one place')
heatmap(data)
treemap(data,
index=c("City_name","Locality_Name","Sub_urban_name"),
vSize = "Price",
type = "index",
title = 'To make all investments in one place')
heatmap(x)
heatmap(x,y)
class(data)
convert <- as.matrix(data)
class(convert)
heatmap(convert)
heatmap(convert$Price)
convertprice <- as.matrix(data$Price)
convertsize <- as.matrix(data$Size)
class(convertsize)
class(convertprice)
heatmap(convertsize, convertprice)
mod <- lm(data$Total_Price ~ data$Size)
mod <- lm(data$Price ~ data$Size)
summary(mod)
plot(mod)
sd(data$Price, na.rm = FALSE)
sd(data$Price, na.rm = FALSE)
